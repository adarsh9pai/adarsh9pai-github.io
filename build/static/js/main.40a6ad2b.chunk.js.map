{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Text","Typography","Header","Layout","Content","Footer","App","react_default","a","createElement","layout","es","delay","type","ease","key","className","href","fc_index_esm","style","marginBottom","fontSize","index_esm","background","color","fi_index_esm","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.40a6ad2b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport QueueAnim from 'rc-queue-anim'\nimport { Layout, Typography} from 'antd';\nimport { SiInstagram, SiTwitter, SiCitrix, SiLinkedin } from 'react-icons/si';\nimport { FiGithub } from 'react-icons/fi';\nimport { FcGoogle } from 'react-icons/fc';\nimport { GrLocationPin } from 'react-icons/gr';\nimport { MdAlternateEmail } from 'react-icons/md';\nconst { Text } = Typography;\nconst { Header, Content, Footer } = Layout;\n\n\n\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <Layout>\n        <Header></Header>\n        <Content>\n          <QueueAnim delay={500} type='left' ease = 'easeInOutQuart'>\n            <div key = {1}>\n              <Text className = \"IntroductionText\">Hi üëã, I'm Adarsh <strong>/</strong> ‡§Ü‡§¶‡§∞‡•ç‡§∂.<br/><br/></Text>\n              <Text className = \"IntroductionText\">I currently work as a Software Engineer at <a href = \"https://www.google.com/\"><FcGoogle style={{marginBottom: '-5px', fontSize: '30px'}}/></a>.<br/></Text>\n              <Text className = \"IntroductionText\">Previously, I worked on Power Management and Brokering at <a href = \"https://www.citrix.com/products/citrix-virtual-apps-and-desktops/\"><SiCitrix style={{fontSize: '24px'}}/></a>.<br/></Text>\n              <Text className = \"IntroductionText\">Graduated with a Summa Cum Laude in Computer Science from the <mark style={{background: '#0064B1'}}><a href = \"https://www.uta.edu/academics/schools-colleges/engineering/academics/departments/cse\">University of Texas at Arlington</a></mark>.<br/></Text>\n              <Text className = \"IntroductionText\">I grew up in different parts of <mark style={{background: '#B3E3EE'}}><a href = \"https://en.wikipedia.org/wiki/Coastal_India\" style={{color: '#2255A4'}}>Coastal India</a></mark>.<br/></Text>\n              <Text className = \"IntroductionText\"><mark style={{background:'#B3995D'}}><a href = \"https://www.youtube.com/watch?v=ze82XMsSgyw\" style={{color: '#AA0000'}}>San Francisco 49ers</a></mark>,<mark style={{background: '#C70101'}}><a href = \"https://youtu.be/UkhMNryOUSQ\">Manchester United</a></mark>, <mark style={{background: '#00529F'}}><a href = \"https://youtu.be/yWVrolNQ4RU\">Real Madrid</a></mark>, and <mark style={{background: '#006bb6'}}><a href = \"https://youtu.be/bhtpppMxfQs\" style={{color: '#fdb927'}}>Golden State Warriors</a></mark> fan.<br/></Text>\n            </div>\n            <div key = {2}>\n              <br/><br/>\n              <a href = \"https://www.instagram.com/adarsh9pai\" className = \"social\"><SiInstagram /></a>\n              <a href = \"https://www.github.com/adarsh9pai\" className = \"social\"><FiGithub /></a>\n              <a href = \"https://www.linkedin.com/in/adarsh9pai\" className = \"social\"><SiLinkedin /></a>\n            </div>\n            <div key = {3}>\n              <br/><br/>\n              <Text className = \"IntroductionText\">Currently living in <mark style={{background: '#BE3A34'}}><a href = \"https://en.wikipedia.org/wiki/Toronto\" style={{color: '#041E42'}}>Toronto</a></mark>.</Text>\n            </div>\n          </QueueAnim>\n        </Content>\n        <Footer style = {{textAlign : 'center'}}>\n          <Text style={{color: '#696969'}}>¬© 2024</Text>\n        </Footer>\n      </Layout>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}